================================================================================
vbmodule: Globals
================================================================================
Option Explicit
'------Testmodus
'Fuer Testzwecke nur eine AB einlesen und formatieren
Public Const testmode = False
'Public Const testmode = True
'id der ab, welche gelesen wird
Public Const test_ab = "132372"
'Public Const test_ab = "124501"
'Konfiguration: Seiteneinrichtung
Public Const label_type = "A" 'A wenn Etiketten ohne Rand über ganze Seite gehen;B wenn Rand vorhanden
Public Const Seitenrand_oben = 2 'in mm (nicht vom Drucker bedruckbar)
Public Const Seitenrand_unten = 0 'in mm (oder besser auf Null, da page-break manuell gesetzt)
Public Const Anz_Etik_vert = 4 'Anzahl der Etiketten übereinander je Seite
'Etikettenraender; werden nicht bedruckt und durch Leerzeilen in Excel realisiert
Public Const ER_v_oben_vor = 3 'in mm; Etikettenrand vor dem obersten Etikett der Seite
Public Const ER_v_oben_nach = 8 'in mm; Etikettenrand nach dem obersten Etikett der Seite
Public Const ER_v_unten_vor = 9 'in mm; Etikettenrand vor dem untersten Etikett der Seite
Public Const ER_v_unten_nach = 3 'in mm; Etikettenrand nach dem untersten Etikett der Seite
'Obere Werte nur fuer Typ A bei oberstem und unterstem Etikett
'Folgender Wert fuer alle andern Etiketten (mittelere) wenn Typ A
'und fuer alle Etiketten wenn Typ B
Public Const ER_v_mitte_vor = 11 'in mm; mindest Etikettenrand (wird nicht bedruckt) unter und ueber jedem Etikett
Public Const ER_v_mitte_nach = 11.5 'in mm; mindest Etikettenrand (wird nicht bedruckt) unter und ueber jedem Etikett
'Nutzzeilen
Public Const h_abnr = 11 'Ab-Nr
Public Const h_ueb_pos = 14 'Ueberschrift
Public Const h_ueb_bez = 14 'Zeile 2
Public Const h_standard = 12 'Standardzeilen
Public Const max_lines = 16               'max-zahl der nutzbaren Etikettzeilen
Public Const max_print_seiten = 10   'Max Anzahl der Seiten die ohne Nachfrage gedruckt werden
'Konfiguration: Verzeichnisse und Sheetnamen
'Public Const xls_auftragsbestand_dir = "V:\E-MAIL\Dr Etscheidt\Software_entwicklung\Montage"
Public Const xls_auftragsbestand_dir = "V:\Fertigung\Excel Makros"
Public Const xls_auftragsbestand_file = "Etiketten.xls"
Public Const xls_auftragsbestand_main_sheet = "Import"   'Ergebnissheet mit allen Daten
Public Const xls_auftragsbestand_KA_sheet = "KA"   'Liste aller Auftraege zur Auswahl
Public Const xls_print_sheet = "Print"   'formatiertes Sheet zum Drucken
Public Const xls_status_sheet = "Status"   'Status des Programms (letzes Einlesen etc)
Public Const xls_ui_sheet = "Start"   'User-Inteface
'Programm Status
Type Status_typ
    letzter_Import As Date
End Type
Public prog_status As Status_typ
'Pumpenmodus Dient zum Einlesen und Drucken gemischter Aufträge (Pumpe + ersatz)
Public pump_mode
'Sonstige Globals
Public data_wb As Workbook  'Arbeitsmappe mit Daten
Public main_sheet As Worksheet 'Ergebnissheet mit allen Daten
Public KA_sheet As Worksheet  'Liste aller Auftraege zur Auswahl
Public print_sheet As Worksheet 'Sheet formatiertes Sheet zum Drucken
Public status_sheet As Worksheet 'Enthaelt Daten, die gemerkt werden sollen
Public UI_sheet As Worksheet 'Enthaelt User-Inteface
Public lines_per_page
Public KA_Id_max 'groesste eingelesene KA Id
Public KA_Id_min 'kleinste eingelesene KA Id
Public KA_Id_liste() As Long 'Alle zu druckenden KA Id
Public UNIPPS_dbr As DB_Reader
Public Sub set_globals()
    'Excel laden, falls nicht schon offen
    'Set data_wb = Oeffne_Excel(xls_auftragsbestand_file, xls_auftragsbestand_dir)
    Set data_wb = Workbooks(xls_auftragsbestand_file)
    Set main_sheet = data_wb.Worksheets(xls_auftragsbestand_main_sheet)
    Set KA_sheet = data_wb.Worksheets(xls_auftragsbestand_KA_sheet)
    Set print_sheet = data_wb.Worksheets(xls_print_sheet)
    Set status_sheet = data_wb.Worksheets(xls_status_sheet)
    Set UI_sheet = data_wb.Worksheets(xls_ui_sheet)
    lines_per_page = (max_lines + 2) * Anz_Etik_vert
    pump_mode = False
End Sub


================================================================================
vbmodule: Menues
================================================================================
'alle Aktionen, die beim Oeffnen der Mappe erfolgen sollen
Public Sub Workbook_Open_handler()
   'Neue FA lesen, vorhandene aktualisieren
    main_Update_Auftragsbestand
End Sub
'Formatiere Auswahl von AB's und drucke diese
Public Sub main_Print_multi()
    'groben Bereich auswaehlen
    Vorauswahl_frm.Show
    If Not Vorauswahl_frm.ok_pressed Then
        Exit Sub
    End If
    ' alle ID'd der AB's holen die in diesem Bereich liegen
    ' und die im Datenbestand (Sheet KA) sind
    get_list_of_ab_ids Vorauswahl_frm.von_textbox, Vorauswahl_frm.bis_textbox
    'Teilmenge per Klick auswaehlen und in globale Liste uebertragen
    multi_Auswahl_frm.Show
    If Not multi_Auswahl_frm.ok_pressed Then
        Exit Sub
    End If
    Info_frm.Meldung = "Etwas Geduld: Formatiere Daten"
    Info_frm.Show
    Info_frm.Repaint
    DoEvents
    'Uebertrage Rohdaten auf print-sheet
    transfer_selected_ABs
    Info_frm.Hide
    'Action
    'print_it
    print_preview
End Sub
'Formatiere Auswahl von AB's und drucke diese
Public Sub main_Print_single()
    Dim ab_id As Long
    set_globals
    'KA Bereich auswaehlen
    If testmode Then
        ab_id = test_ab
    Else
        Auswahl_frm.Show
        If Not Auswahl_frm.ok_pressed Then
            Exit Sub
        End If
        ab_id = Auswahl_frm.id_textbox
    End If
    Info_frm.Meldung = "Etwas Geduld: Formatiere Daten"
    Info_frm.Show
    Info_frm.Repaint
    DoEvents
    'Suche 1 AB in main_sheet und uebertrage nach print sheet
    'startzeile wird nur gebraucht, wenn mehrere KA zusammen gedruckt werden (main_Print_multi)
    print_sheet.Cells.ClearContents
    out_row = 1
    transfer_single_AB start_row:=2, id:=ab_id
    Info_frm.Hide
    'Action
    'print_it
    print_preview
End Sub
Public Sub main_Update_Auftragsbestand()
On Error GoTo Fehler
'Mappen laden und vorbereiten
Application.StatusBar = "Starte Makro " & Format(Now(), "HH:mm:ss")
set_globals
Status_lesen
Import_frm.importieren = True 'Flag setzen damit do while nicht sofort abweist
Do While Import_frm.importieren
    'Abfragen ob neu eingelesen werden soll
    If testmode Then
        Import_frm.tage_zurueck = 0 'dummy-wert
    Else
        Import_frm.Show
    End If
    If Not Import_frm.importieren Then
        'Exit Sub
        GoTo Aufraeumen
    End If
    Info_frm.Meldung = "Etwas Geduld: Lese Daten aus UNIPPS"
    Info_frm.Show
    Info_frm.Repaint
    DoEvents
    'globales Db_reader Objekt anlegen
    Set UNIPPS_dbr = New_DB_Reader
    UNIPPS_dbr.Open_Informix_Connection
    'Ersatz-Kundenaufträge seit x Tagen in Excel KA_imp_sheet einlesen
    Application.StatusBar = "UNIPPS wird gelesen " & Format(Now(), "HH:mm:ss")
    Dim import_start As Date
    import_start = Now() - Import_frm.tage_zurueck
    'Hole Ersatz_KA aus UNIPPS
    'Nur ID'S in Sheet KA
    get_ka_ID_only_from_unipps import_start
    'Alle noetigen Daten in Sheet Import
    get_ka_with_data_from_unipps import_start
    fuege_Teile_Info_an
    'Neues Blatt fuer Print-Format anlegen
    'Set print_sheet = add_sheet("Print")
    prog_status.letzter_Import = Now()
    Status_speichern
    Info_frm.Hide
    If testmode Then
        GoTo Aufraeumen
    End If
Loop
Aufraeumen:
    On Error Resume Next
    Exit Sub
Fehler:
    MsgBox "Abbruch wg Fehler: " & Err.Description
    Resume Aufraeumen
End Sub
Public Sub main_Pumpenauftrag_lesen_und_drucken()
Dim ab_id As Long
On Error GoTo Fehler
'Mappen laden und vorbereiten
Application.StatusBar = "Starte Makro " & Format(Now(), "HH:mm:ss")
set_globals
Status_lesen
'ID des Auftrages einlesen
Auswahl_frm.Show
If Not Auswahl_frm.ok_pressed Then
    Exit Sub
End If
ab_id = Auswahl_frm.id_textbox
'globales Db_reader Objekt anlegen
Set UNIPPS_dbr = New_DB_Reader
UNIPPS_dbr.Open_Informix_Connection
'Ersatz-Kundenaufträge seit x Tagen in Excel KA_imp_sheet einlesen
Application.StatusBar = "UNIPPS wird gelesen " & Format(Now(), "HH:mm:ss")
'Hole Ersatz_KA aus UNIPPS
'Nur ID'S in Sheet KA
ab_id = test_ab
get_ka_ID_only_from_unipps_per_ID ab_id
'Alle noetigen Daten in Sheet Import
get_ka_with_data_from_unipps_per_ID ab_id
fuege_Teile_Info_an
prog_status.letzter_Import = Now()
Status_speichern
'--------- Drucken
'Suche 1 AB in main_sheet und uebertrage nach print sheet
'startzeile wird nur gebraucht, wenn mehrere KA zusammen gedruckt werden (main_Print_multi)
print_sheet.Cells.ClearContents
out_row = 1
transfer_single_AB start_row:=2, id:=ab_id
'Action
print_preview
Aufraeumen:
    On Error Resume Next
    Exit Sub
Fehler:
    MsgBox "Abbruch wg Fehler: " & Err.Description
    Resume Aufraeumen
End Sub
Public Sub main_Update_format()
    format_print_sheet
End Sub


================================================================================
vbmodule: Spielwiese
================================================================================
Sub test()
    Dim new_sheet As Worksheet
    Debug.Print Now
    'set_globals
    'Status_lesen
    main_Update_Auftragsbestand
    'Set new_sheet = add_sheet("re")
    'del_sheet new_sheet
    Debug.Print Now
End Sub


================================================================================
vbmodule: Auftragsbestand
================================================================================
    Option Explicit
    Public Function get_min_KA_Id()
        get_min_KA_Id = KA_sheet.Range("A2")
    End Function
    Public Function get_min_KA_date()
        get_min_KA_date = KA_sheet.Range("B2")
    End Function
    Public Function get_max_KA_Id()
        Dim last_row As Long
        last_row = hole_zeilen(KA_sheet.Range("A1"))
        get_max_KA_Id = KA_sheet.Cells(last_row, 1)
    End Function
    Public Function get_max_KA_date()
        Dim last_row As Long
        last_row = hole_zeilen(KA_sheet.Range("A1"))
        get_max_KA_date = KA_sheet.Cells(last_row, 2)
    End Function
    Public Function translate(text_id, sprache)
        Dim text(10) As String
        Select Case sprache
            Case "D"
                text(1) = "Type/Abmessung:": text(2) = "Werkstoff:": text(3) = "Spezifikation:"
                text(4) = "K.Ident-Nr:": text(5) = "K.Ref-Nr:": text(6) = "K.Zchn-Nr:"
            Case "E"
                text(1) = "type/dimensions:": text(2) = "material:": text(3) = "spezification:"
                text(4) = "Cust.No.:": text(5) = "Cust.ref.No.": text(6) = "Cust.draw.No."
            Case "F"
                text(1) = "type/dimensions:": text(2) = "matériaux:": text(3) = "spezification:"
                text(4) = "No du client:": text(5) = "": text(6) = ""
            Case Else
                MsgBox "Sprache <" & sprache & "> ist noch nicht programmiert."
        End Select
        translate = text(text_id)
    End Function
    'Checkt ob KA_ID schon in Excel vorhanden
    Public Function id_in_excel(id_2_searchfor As Long)
        Dim last_row As Long, in_row As Long, id As Long
        last_row = hole_zeilen(KA_sheet.Range("A1"))
        in_row = 2
        Dim found As Boolean
        found = False
        With KA_sheet.Range("A1")
            Do While in_row <= last_row
                id = CLng(Trim(.Cells(in_row, 1).Value))
                If id = id_2_searchfor Then
                    found = True
                    Exit Do
                End If
                in_row = in_row + 1  'Naechster datensatz
            Loop
        End With
        If Not found Then
 MsgBox "Ihr Auftrag " & id_2_searchfor & " konnte nicht gefunden werden." & vbCrLf & vbCrLf                   & "Evtl. Daten erneut einlesen."
        End If
    End Function
    'Holt alle ID'S die innerhalb des Bereiches von min_id bis max_id liegen in globale Liste
    Public Sub get_list_of_ab_ids(min_id As Long, max_id As Long)
        Dim last_row As Long, in_row As Long, id As Long
        last_row = hole_zeilen(KA_sheet.Range("A1"))
        in_row = 2
        Dim anz_ids%
        anz_ids = 0
        With KA_sheet.Range("A1")
            Do While in_row <= last_row
                id = CLng(Trim(.Cells(in_row, 1).Value))
                If id > max_id Then
                    Exit Do
                ElseIf id >= min_id Then
                    'store it
                    ReDim Preserve KA_Id_liste(anz_ids)
                    KA_Id_liste(anz_ids) = id
                    anz_ids = anz_ids + 1
                End If
                in_row = in_row + 1  'Naechster datensatz
            Loop
        End With
    End Sub
    'Hole Kundeaufträge (nur ID'S) aus UNIPPS per Datumsfilter
    'Bezeichnung beginnt mit Ersatz; Status <4
    Public Sub get_ka_ID_only_from_unipps(start_datum As Date)
        Dim sql$
        sql = sql_ersatz_Etiketten_nur_ID(start_datum)
        UNIPPS_dbr.open_rs (sql)
        If UNIPPS_dbr.Connection.Errors.Count <> 0 Then
            abbruchmeldung "UNIPPS-Daten konnten nicht gelesen werden."
        End If
        'Daten in sheet ablegen
        UNIPPS_dbr.recordset_2_sheet KA_sheet.Range("A1"), Clear:=True, Header:=True
    End Sub
    'Hole einen Kundeauftrag (nur ID und anlagedatum) aus UNIPPS per ID
    'Kein Filter auf Ersatz oder Status
    Public Sub get_ka_ID_only_from_unipps_per_ID(auftragkopf_ident_nr As Long)
        Dim sql$
        sql = sql_ersatz_Etiketten_nur_ID_per_ID(auftragkopf_ident_nr)
        UNIPPS_dbr.open_rs (sql)
        If UNIPPS_dbr.Connection.Errors.Count <> 0 Then
            abbruchmeldung "UNIPPS-Daten konnten nicht gelesen werden."
        End If
        'Daten in sheet ablegen
        UNIPPS_dbr.recordset_2_sheet KA_sheet.Range("A1"), Clear:=True, Header:=True
    End Sub
    'Hole Kundeaufträge mit relevanten Infos aus UNIPPS per Datumsfilter
    'Bezeichnung beginnt mit Ersatz; Status <4
    Public Sub get_ka_with_data_from_unipps(start_datum As Date)
        Dim sql$
        sql = sql_ersatz_Etiketten(start_datum)
        UNIPPS_dbr.open_rs (sql)
        If UNIPPS_dbr.Connection.Errors.Count <> 0 Then
            abbruchmeldung "UNIPPS-Daten konnten nicht gelesen werden."
        End If
        'Altbestand loeschen
        main_sheet.Cells.ClearContents
        'Daten in sheet ablegen
        UNIPPS_dbr.recordset_2_sheet main_sheet.Range("A1"), Clear:=True, Header:=True
    End Sub
    'Hole einen Kundeauftrag mit relevanten Infos aus UNIPPS per ID
    'Kein Filter auf Ersatz oder Status
    Public Sub get_ka_with_data_from_unipps_per_ID(auftragkopf_ident_nr As Long)
        Dim sql$
        sql = sql_ersatz_Etiketten_per_ID(auftragkopf_ident_nr)
        UNIPPS_dbr.open_rs (sql)
        If UNIPPS_dbr.Connection.Errors.Count <> 0 Then
            abbruchmeldung "UNIPPS-Daten konnten nicht gelesen werden."
        End If
        'Altbestand loeschen
        main_sheet.Cells.ClearContents
        'Daten in sheet ablegen
        UNIPPS_dbr.recordset_2_sheet main_sheet.Range("A1"), Clear:=True, Header:=True
    End Sub
    'Erzeuggt SQL zum Lesen von Teileinfo
    'SELECT unipps_teil_bez.ident_nr1, unipps_teil_bez.sprache, unipps_teil_bez.art, unipps_teil_bez.v, unipps_teil_bez.pos_nr AS zeile, unipps_teil_bez.text
    'FROM unipps_teil_bez WHERE (((unipps_teil_bez.ident_nr1) = "472I30140ISA019") And ((unipps_teil_bez.sprache) = "D")
    'And ((unipps_teil_bez.art) = 1 Or (unipps_teil_bez.art) = 3) And ((unipps_teil_bez.v) = 1)) ORDER BY unipps_teil_bez.pos_nr;
    Private Function teileinfo(tg_nr, sprache, art) As Recordset
        Dim sql$
 sql = "SELECT text FROM teil_bez " & "WHERE ident_nr1 = """ & tg_nr & """ And sprache = """ & sprache & """ And art=" & art & "  and v=1 "              & "ORDER BY pos_nr;"
        Set teileinfo = UNIPPS_dbr.open_rs(sql)
        If UNIPPS_dbr.Connection.Errors.Count <> 0 Then
            abbruchmeldung "UNIPPS-Daten konnten nicht gelesen werden."
        End If
    End Function
    'Loop über Import-Tabelle und zu jeder Pos Teile-Infos dazu
    Public Sub fuege_Teile_Info_an()
        Dim col%, row As Long, last_row As Long
        Dim liefer_tag As Date
        Dim sprache$, tg_nr$, sql$
        Dim myrs As Recordset
        Dim art%
        Dim msg$
        last_row = hole_zeilen(main_sheet.Range("A1")) + 1
        'Suche alle Zeilen
        'start_col_teileinfo = 12
        With main_sheet.Range("A1")
            For row = 2 To last_row - 1
                sprache = Trim(.Cells(row, 4).Value)
                tg_nr = Trim(.Cells(row, 6).Value)
                art = 1
                'Hole Daten aus Tabelle "unipps_teil_bez" mit Parameter Sprache,tg_nr und art
                'hier art 1 => ergibt Hauptbezeichnung des Teiles
                Set myrs = teileinfo(tg_nr, sprache, art)
                If myrs.RecordCount <> 1 And InStr(tg_nr, "PP") <> 1 Then
                    msg = "Ungültige Daten erkannt im Modul Auftragsbestand." & vbCrLf
                    msg = msg & "Position " & tg_nr & " besitzt " & myrs.RecordCount & " Teilebezeichnungen."
                    abbruchmeldung msg
            ElseIf myrs.RecordCount = 1 Then
                myrs.MoveFirst
                .Cells(row, start_col_teileinfo).Value = myrs.Fields("text")
            End If
            myrs.Close
            art = 3
            'hier art 3 => ergibt weitere "freie" Beschreibungstexte
            Set myrs = teileinfo(tg_nr, sprache, art)
            If myrs.RecordCount > 0 Then
                myrs.MoveFirst
                col = start_col_teileinfo + 1
                Do While Not myrs.EOF
                    .Cells(row, col).Value = myrs.Fields("text")
                    col = col + 1
                    myrs.MoveNext
                Loop
            End If
        Next
    End With
End Sub


================================================================================
vbmodule: Formatieren
================================================================================
Option Explicit
'Wieviele Seiten sollen formatiert werden ?
Const pages_2_format = 100
'Sollen zum Testen Linien ueber und unter den Etiketten gedruckt werden ?
'Const withlines = True
Const withlines = False
'Alle Formate erzeugen
Public Sub format_print_sheet()
    set_globals
    print_sheet.Cells.ClearFormats
    format_print_sheet_common
    format_print_sheet_page_breaks
    format_print_sheet_columns
    format_print_sheet_rows
    copy_page_format 'Alles auf Folgeseiten kopieren
    'print_test_page
End Sub
'Print_Sheet Spalten formatieren
Public Sub format_print_sheet_columns()
    'Spaltenbreiten
    'Const w1 = 0.1:   Const w2 = 4:    Const w3 = 11.86:    Const w4 = 37
    Const w1 = 4:   Const w2 = 4:    Const w3 = 11.86:    Const w4 = 32
    Const w5 = 1:     Const w6 = 25
    set_globals
    Application.StatusBar = "Formatiere Spalten"
    DoEvents
    'Spaltenbreiten
    print_sheet.Columns(1).ColumnWidth = w1
    print_sheet.Columns(2).ColumnWidth = w2
    print_sheet.Columns(3).ColumnWidth = w3
    print_sheet.Columns(4).ColumnWidth = w4
    print_sheet.Columns(5).ColumnWidth = w5
    print_sheet.Columns(6).ColumnWidth = w2
    print_sheet.Columns(7).ColumnWidth = w3
    print_sheet.Columns(8).ColumnWidth = w6
End Sub
'Standard-Formate Fuer ganzes Blatt
Public Sub format_print_sheet_common()
    Dim row As Long
    Dim SRO, SRU As Double
    set_globals
    Application.StatusBar = "Formatiere Allgemeines"
    DoEvents
    print_sheet.Cells.Font.name = "Arial"
    print_sheet.Cells.Font.Size = 8
    print_sheet.Cells.VerticalAlignment = xlCenter
    print_sheet.Cells.HorizontalAlignment = xlLeft
    If UCase(label_type) = "A" Then
        'Etiketten gehen ohne Rand ueber ganze Seite
        'Wert um ER_vert_min mm verringern um Platz fuer eine Excel-Leerzeile zu schaffen,
        'die immer vom Programm erwartet wird. Das Etikett wird dadurch besser genutzt
        SRO = Seitenrand_oben - ER_v_oben_vor
        SRU = Seitenrand_unten - ER_v_unten_nach
    ElseIf UCase(label_type) = "B" Then
        SRO = Seitenrand_oben
        SRU = Seitenrand_unten
    Else
        MsgBox "nicht programmierter label_type <" & label_type & "> (ungleich A oder B)"
        End
    End If
    SRO = Application.CentimetersToPoints(Seitenrand_oben / 10)
    SRU = Application.CentimetersToPoints(Seitenrand_unten / 10)
    print_sheet.PageSetup.TopMargin = SRO
    print_sheet.PageSetup.BottomMargin = SRU
End Sub
'Seitenumbrueche
Public Sub format_print_sheet_page_breaks()
    Dim row As Long, page%
    set_globals
    Application.StatusBar = "Formatiere Seitenumbrüche"
    DoEvents
    print_sheet.ResetAllPageBreaks
    row = lines_per_page
    For page = 1 To pages_2_format
        print_sheet.HPageBreaks.Add Before:=print_sheet.Rows(row + 1)
        row = row + lines_per_page
    Next
    'For row = lines_per_page To 100 * lines_per_page Step lines_per_page
    '    print_sheet.HPageBreaks.Add Before:=print_sheet.Rows(row + 1)
    'Next
End Sub
'Drucke 1 Seite vom Printsheet
Public Sub print_test_page()
    ExecuteExcel4Macro "PRINT(2,1,1,1,,,,,,,,2,,,TRUE,,FALSE)"
End Sub
'Zeilen formatieren
Public Sub format_rows_for_one_label(row As Long, ER_vor, ER_nach)
    Dim i
    Application.StatusBar = "Formatiere Musterseite Zeile " & row
    DoEvents
    print_sheet.Rows(row).RowHeight = ER_vor 'Leerzeile vor Etikett
    row = row + 1
    If withlines Then
        print_sheet.Rows(row).Borders(xlEdgeTop).LineStyle = xlContinuous
        print_sheet.Rows(row).Borders(xlEdgeTop).Weight = xlThin
    End If
    print_sheet.Rows(row).RowHeight = h_abnr  'Ab-Nr
    row = row + 1
    Application.StatusBar = "Formatiere Musterseite Zeile " & row
    DoEvents
    print_sheet.Rows(row).RowHeight = h_ueb_pos  'Ueberschrift
    print_sheet.Rows(row).Font.Size = 11
    print_sheet.Rows(row).Font.Bold = True
    row = row + 1
    print_sheet.Rows(row).RowHeight = h_ueb_bez  'Zeile 2
    print_sheet.Rows(row).Font.Size = 11
    print_sheet.Rows(row).Font.Bold = True
    row = row + 1
    Application.StatusBar = "Formatiere Musterseite Zeile " & row
    DoEvents
    row = row + max_lines - 3 'obige drei Nutzzeilen gehen von max_lines ab
    If withlines Then
        print_sheet.Rows(row).Borders(xlEdgeBottom).LineStyle = xlContinuous
        print_sheet.Rows(row).Borders(xlEdgeBottom).Weight = xlThin
    End If
    print_sheet.Rows(row).RowHeight = ER_nach 'Leerzeile nach Etikett
    row = row + 1
    Application.StatusBar = "Formatiere Musterseite Zeile " & row
    DoEvents
End Sub
Public Sub format_print_sheet_rows()
    Dim row As Long, i%, page%
    row = 1
    Application.ScreenUpdating = False
    'standardhoehe fuer alle Zeilen
    print_sheet.Cells.RowHeight = h_standard
    For page = 1 To 1 'pages_2_format
        Application.StatusBar = "Formatiere Zeile " & row '& " von " & last_row
        If UCase(label_type) = "A" Then
          'Etiketten gehen ohne Rand ueber ganze Seite
          format_rows_for_one_label row, ER_v_oben_vor, ER_v_oben_nach
          For i = 1 To Anz_Etik_vert - 2
            format_rows_for_one_label row, ER_v_mitte_vor, ER_v_mitte_nach
          Next
          format_rows_for_one_label row, ER_v_unten_vor, ER_v_unten_nach
        ElseIf UCase(label_type) = "B" Then
          For i = 1 To Anz_Etik_vert
            format_rows_for_one_label row, ER_v_mitte_vor, ER_v_mitte_nach
          Next
        Else
            MsgBox "nicht programmierter label_type <" & label_type & "> (ungleich A oder B)"
            End
        End If
    Next
    Application.ScreenUpdating = True
End Sub
'Zeilen formatieren
' ################## Kann sehr lange dauern ######################
Public Sub xxxformat_print_sheet_rows()
    Dim last_row As Long, row As Long
    Dim i%
    Dim format_leer As Boolean, format_header As Boolean, format_standard As Boolean, with_print As Boolean
    set_globals
    'Zeilenhoehen
    Const h_leer_1 = 9: Const h_leer_last = 2
    Const h_leer = 17: Const h_abnr = 11: Const h_ueb_pos = 15
    Const h_ueb_bez = 14:    Const h_standard = 12.3
    'Was wird gemacht ?
    format_leer = True: format_header = True: format_standard = True
    with_print = False
    'generell so viele Etiketten formatieren, wie Zeilen in Import-Sheet, auch bei zweispaltig
    'last_row = hole_zeilen(main_sheet.Range("A1"))
    '100 Seiten formatieren: datt dauert
    last_row = lines_per_page * 100 + 2
    last_row = 20
    row = 1
    Application.ScreenUpdating = False
    Application.StatusBar = "Formatiere Zeile " & row & " von " & last_row
    Do While row < last_row
        DoEvents
        '''''alt
        If False Then
            If row Mod lines_per_page = 1 Then
                print_sheet.Rows(row).RowHeight = h_leer_1 'Leerzeile
            Else
                print_sheet.Rows(row).RowHeight = h_leer 'Leerzeile
            End If
        End If
        If format_header Then
            print_sheet.Rows(row).RowHeight = h_abnr  'Ab-Nr
            print_sheet.Rows(row + 1).RowHeight = h_ueb_pos 'Ueberschrift
            print_sheet.Rows(row + 1).Font.Size = 10
            print_sheet.Rows(row + 1).Font.Bold = True
            print_sheet.Rows(row + 2).RowHeight = h_ueb_bez 'Zeile 2
            print_sheet.Rows(row + 2).Font.Size = 10
            print_sheet.Rows(row + 2).Font.Bold = True
        End If
        If format_standard Then
            For i = 3 To max_lines
                print_sheet.Rows(row + i).RowHeight = h_standard 'Zeile 3 ...
            Next i
        End If
        '''''''row = row + max_lines + 1
        row = row + max_lines
        If format_leer Then
            If row Mod lines_per_page = 0 Then
                print_sheet.Rows(row).RowHeight = h_leer_last 'Leerzeile
            ElseIf row Mod lines_per_page = 17 Then
                print_sheet.Rows(row).RowHeight = h_leer_1 'Leerzeile
            Else
                print_sheet.Rows(row).RowHeight = h_leer 'Leerzeile
            End If
        End If
        row = row + 1
        Application.StatusBar = "Formatiere Zeile " & row & " von " & last_row
    Loop
    Application.ScreenUpdating = True
End Sub
Public Sub copy_page_format()
    Dim ori_seite, ziel_seite As Range
    Dim page%
    set_globals
    Set ori_seite = Range(print_sheet.Rows(1), print_sheet.Rows(lines_per_page))
    Application.ScreenUpdating = False
    ori_seite.Copy
    For page = 2 To pages_2_format
        Application.StatusBar = "Formatiere Seite " & page & " von " & pages_2_format
        Set ziel_seite = ori_seite.Offset((page - 1) * lines_per_page, 0)
        ziel_seite.PasteSpecial Paste:=xlPasteFormats
    Next page
    Application.CutCopyMode = False
    Application.ScreenUpdating = True
    Application.StatusBar = pages_2_format & " Seiten druckbereit formatiert"
End Sub


================================================================================
vbmodule: Tools
================================================================================
Option Explicit
Function add_sheet(name) As Worksheet
    Set data_wb = Workbooks(xls_auftragsbestand_file)
    Set add_sheet = data_wb.Sheets.Add
    add_sheet.name = name
End Function
Sub del_sheet(sheet2del As Worksheet)
    Application.DisplayAlerts = False
    sheet2del.Delete
    Application.DisplayAlerts = True
End Sub


================================================================================
vbform: Vorauswahl_frm
================================================================================
Public ok_pressed As Boolean
Private Sub ESC_btn_Click()
        Me.Hide
        ok_pressed = False
End Sub
Private Sub OK_btn_Click()
    If bis_textbox.Value < von_textbox.Value Then
        MsgBox "Der Wert für ""von"" muss kleiner sein, als der Wert für ""bis"""
    ElseIf Int(bis_textbox.Value) > KA_Id_max Then
        MsgBox "Der Wert für ""bis"" muss kleiner oder gleich der höchsten verfügbare Auftragsnummer sein : " & KA_Id_max
    ElseIf Int(von_textbox.Value) < KA_Id_min Then
        MsgBox "Der Wert für ""von"" muss größer oder gleich der kleinsten verfügbare Auftragsnummer sein : " & KA_Id_min
    Else
        ok_pressed = True
        Me.Hide
    End If
End Sub
Private Sub UserForm_Activate()
    Update_Form_Before_Showing
End Sub
Private Sub UserForm_Initialize()
    set_globals
    ok_pressed = False
    Update_Form_Before_Showing
End Sub
Sub Update_Form_Before_Showing()
    KA_Id_max = get_max_KA_Id
    bis_textbox.Value = KA_Id_max
    KA_Id_min = get_min_KA_Id
    von_textbox.Value = KA_Id_min
End Sub


================================================================================
vbmodule: Status
================================================================================
Public Sub Status_lesen()
    'Status des letzten Einlesen holen
    prog_status.letzter_Import = status_sheet.Range("B1")
End Sub
Public Sub Status_speichern()
    'akt Status ablegen
    status_sheet.Range("B1") = prog_status.letzter_Import
End Sub


================================================================================
vbform: Import_frm
================================================================================
Public importieren As Boolean
Private Sub ESC_btn_Click()
        Me.Hide
        importieren = False
End Sub
Private Sub OK_btn_Click()
    If Int(tage_zurueck.Value) < 0 Then
        MsgBox "Die Anzahl der Tage muß größer 0 sein !"
    Else
        Me.Hide
        importieren = True
    End If
End Sub
Private Sub UserForm_Activate()
    Update_Form_Before_Showing
End Sub
Private Sub UserForm_Initialize()
    set_globals
    importieren = False
    Update_Form_Before_Showing
End Sub
Sub Update_Form_Before_Showing()
    Me.letztes_Importdatum = prog_status.letzter_Import
    Me.aelteste_AB_Id = get_min_KA_Id
    Me.aelteste_AB_Datum = get_min_KA_date
    Me.neueste_AB_Id = get_max_KA_Id
    Me.neueste_AB_Datum = get_max_KA_date
End Sub


================================================================================
vbmodule: Transfer_2_print_Sheet
================================================================================
Public out_row  As Long
'Uebertraegt Daten der gewaehlten ABs vom Import-Sheet auf Print-Sheet
Public Sub transfer_selected_ABs()
    Dim anz_ab%
    Dim start_row As Long
    print_sheet.Cells.ClearContents
    out_row = 1
    'fuer alle abs der Liste
    start_row = 2
    For anz_ab = 0 To UBound(KA_Id_liste)
        'Suche 1 AB in main_sheet und uebertrage nach print sheet
        'liefert startzeile in main_sheet fuer naechste Suche
        start_row = transfer_single_AB(start_row, KA_Id_liste(anz_ab))
    Next
End Sub
'Suche 1 AB in main_sheet und uebertrage nach print sheet
'liefert startzeile in main_sheet fuer naechste Suche
Public Function transfer_single_AB(start_row As Long, id As Long) As Long
    Dim cur_id As Long, last_row As Long
    Dim found As Boolean, alte_Spalte_war_2 As Boolean
    last_row = hole_zeilen(main_sheet.Range("A1"))
    found = False
    Do While start_row <= last_row
        cur_id = CLng(Trim(main_sheet.Cells(start_row, 1).Value))
        If cur_id = id Then
            found = True
            Exit Do
        End If
        start_row = start_row + 1
    Loop
    'Nix gefunden watt nu
    '#############################################################
    If Not found Then
 MsgBox "Ihr Auftrag " & id & " konnte nicht gefunden werden." & vbCrLf & vbCrLf               & "Evtl. Daten erneut einlesen."
        End
    End If
    'Label 1 der AB in Etiketten-Spalte 1 uebertragen
    transfer_single_label start_row, out_row, 2
    'Weitere pos zu selben AB suchen
    start_row = start_row + 1
    Do While start_row <= last_row
        cur_id = CLng(Trim(main_sheet.Cells(start_row, 1).Value))
        If cur_id <> id Then
            'fertig mit dieser AB
            Exit Do
        End If
        If alte_Spalte_war_2 Then
            'Spalte 1
            out_row = out_row + max_lines + 2 '  Vorschub auf naechstes Etikett mit 2 Leerzeile
            transfer_single_label start_row, out_row, 2
            alte_Spalte_war_2 = False
        Else
            'Spalte 2
            transfer_single_label start_row, out_row, 6
            alte_Spalte_war_2 = True
        End If
        start_row = start_row + 1
    Loop
    out_row = out_row + max_lines + 2 '  Vorschub auf naechstes Etikett mit 2 Leerzeile
    transfer_single_AB = start_row 'fuer naechste Suche
End Function
'in_row ,in_col: Zelle aus der gelesen wird
'out_row,out_col: Ziel-Telle
'trans_id: Index der Bezeiochnung zum Uebersetzen
'sprache: Zielsprachen
Public Sub print_attribute_with_translation(in_row As Long, in_col%, out_row As Long, out_col%, trans_id, sprache)
    With main_sheet.Range("A1")
        att = Trim(.Cells(in_row, in_col).Value)
        If att <> "" Then
            print_sheet.Cells(out_row, out_col).Value = translate(trans_id, sprache)
            If IsNumeric(att) Then
                att = "'" + CStr(att)
            End If
            print_sheet.Cells(out_row, out_col + 2).Value = att
            out_row = out_row + 1
        End If
    End With
End Sub
'Ein Etikett uebertragen und formatieren
Public Sub transfer_single_label(in_row As Long, start_out_row As Long, out_col%)
    Dim sprache$, txt$
    Dim in_col%
    Dim typ$, mat$, spez$, k_id$
    Dim out_row As Long, max_out_row As Long
    out_row = start_out_row
    max_out_row = start_out_row + max_lines - 1 'Etikett endet
    With main_sheet.Range("A1")
        sprache = Trim(.Cells(in_row, 4).Value)
        '1 Leerzeile am Anfang
        out_row = out_row + 1
        'Auftrags-Nr
        print_sheet.Cells(out_row, out_col).Value = "'" + CStr(Trim(.Cells(in_row, col_ab_nr).Value))
        out_row = out_row + 1
        'Pos-Nr, teile nummer und Stück
        print_sheet.Cells(out_row, out_col).Value = Trim(.Cells(in_row, col_pos_nr).Value)
        tg_nr = Trim(.Cells(in_row, col_t_tg_nr).Value)
        menge = Trim(.Cells(in_row, col_menge).Value)
        print_sheet.Cells(out_row, out_col + 1).Value = tg_nr + "  (" + menge + "x)"
        out_row = out_row + 1
        'Teile-Bez
        print_sheet.Cells(out_row, out_col).Value = Trim(.Cells(in_row, col_teil_bezeich).Value)
        out_row = out_row + 1
        'Type
        print_attribute_with_translation in_row, col_typ, out_row, out_col, 1, sprache
        'Werkstoff
        print_attribute_with_translation in_row, col_werkstoff, out_row, out_col, 2, sprache
        'Spez
        print_attribute_with_translation in_row, col_spezifikation, out_row, out_col, 3, sprache
        'Kunden-Id
        print_attribute_with_translation in_row, col_k_ident, out_row, out_col, 4, sprache
        'Kunden-Ref-Nr (K_Typ)
        print_attribute_with_translation in_row, col_k_Typ, out_row, out_col, 5, sprache
        'Kunden-Z-NR
        print_attribute_with_translation in_row, col_k_Zchn_Nr, out_row, out_col, 6, sprache
        'Rest
        in_col = col_teil_bezeich + 1
        Do While Not IsEmpty(.Cells(in_row, in_col))
            txt = Trim(.Cells(in_row, in_col).Value)
            If IsNumeric(txt) Then
                txt = "'" + CStr(txt)
            End If
            print_sheet.Cells(out_row, out_col).Value = txt
            If out_row = max_out_row Then
                Exit Do
            End If
            out_row = out_row + 1
            in_col = in_col + 1
        Loop
    End With
    out_row = out_row + 1 '1 Leerzeile danach
End Sub
Sub print_preview()
    print_sheet.PrintPreview
End Sub
Sub print_it()
    seiten = Int(out_row / lines_per_page)
    If seiten > max_print_seiten Then
        ans = MsgBox("Sollen wirklich " + Str(seiten) + " Seiten gedruckt werden ?", vbYesNo, "Achtung")
    Else
        ans = vbYes 'Weniger als max_seiten immer durcken
    End If
    If ans = vbYes Then
        print_sheet.Select
        ExecuteExcel4Macro "PRINT(1,,,1,,,,,,,,2,,,TRUE,,FALSE)"
        UI_sheet.Select
    End If
End Sub


================================================================================
vbmodule: xx_veraltet
================================================================================
'Formatiere Auswahl von AB's und drucke diese
Public Sub xxxmain_Print()
    'groben Bereich auswaehlen
    Vorauswahl_frm.Show
    If Not Vorauswahl_frm.ok_pressed Then
        Exit Sub
    End If
    ' alle ID'd der AB's holen die in diesem Bereich liegen
    ' und die im Datenbestand (Sheet KA) sind
    get_list_of_ab_ids Vorauswahl_frm.von_textbox, Vorauswahl_frm.bis_textbox
    'Teilmenge per Klick auswaehlen und in globale Liste uebertragen
    Auswahl_frm.Show
    If Not Auswahl_frm.ok_pressed Then
        Exit Sub
    End If
    Info_frm.Meldung = "Etwas Geduld: Formatiere Daten"
    Info_frm.Show
    Info_frm.Repaint
    DoEvents
    'Uebertrage Rohdaten auf print-sheet
    transfer_selected_ABs
    Info_frm.Hide
    'Action
    print_it
End Sub
'Uebertraegt Daten vom Import-Sheet auf Print-Sheet
Public Sub xxtransfer_data()
    Dim col%, in_row As Long, last_row As Long, out_row As Long
    Dim neue_AB As Boolean, alte_Spalte_war_2 As Boolean
    set_globals
    last_row = hole_zeilen(main_sheet.Range("A1"))
    print_sheet.Cells.ClearContents
    With main_sheet.Range("A1")
        out_row = 2
        in_row = 2
        'Erster Datensatz immer in Spalte 1
        alte_Spalte_war_2 = False
        transfer_single in_row, out_row, 2
        Do While in_row + 1 < last_row
            in_row = in_row + 1  'Naechster datensatz
            'Naechster Datensatz Spalte 1 oder 2
            'Spalte 1 bei neuer Auftragsnummer oder wenn letztes Etikett in Spalte 2 ausgegeben
            neue_AB = CStr(Trim(.Cells(in_row, 1).Value)) <> CStr(Trim(.Cells(in_row - 1, 1).Value))
            If neue_AB Or alte_Spalte_war_2 Then
                'Spalte 1
                out_row = out_row + max_lines + 1 '  Vorschub auf naechstes Etikett mit 1 Leerzeile
                transfer_single in_row, out_row, 2
                alte_Spalte_war_2 = False
            Else
                'Spalte 2
                transfer_single in_row, out_row, 6
                alte_Spalte_war_2 = True
            End If
        Loop
    End With
End Sub


================================================================================
vbform: multi_Auswahl_frm
================================================================================
Public ok_pressed As Boolean
Private Sub ESC_btn_Click()
        ok_pressed = False
        Me.Hide
End Sub
Private Sub OK_btn_Click()
    Dim i%
    For i = 0 To print_lb.ListCount - 1
        'store it
        ReDim Preserve KA_Id_liste(i)
        KA_Id_liste(i) = print_lb.List(i)
    Next i
    ok_pressed = True
    Me.Hide
End Sub
'Maus: Eine AB aus print_lb raus schieben
Private Sub print_lb_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    move_one_Click source_lb:=print_lb, target_lb:=no_print_lb, moveall:=False
End Sub
'Button: Alle AB aus print_lb raus schieben
Private Sub deselect_all_Click()
    move_one_Click source_lb:=print_lb, target_lb:=no_print_lb, moveall:=True
End Sub
'Button: Eine AB aus print_lb raus schieben
Private Sub deselect_one_Click()
    move_one_Click source_lb:=print_lb, target_lb:=no_print_lb, moveall:=False
End Sub
'Maus: Einzelne AB in print_lb schieben
Private Sub no_print_lb_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    move_one_Click source_lb:=no_print_lb, target_lb:=print_lb, moveall:=False
End Sub
'Button: Alle AB in print_lb schieben
Private Sub select_all_Click()
    move_one_Click source_lb:=no_print_lb, target_lb:=print_lb, moveall:=True
End Sub
'Button: Einzelne AB in print_lb schieben
Private Sub select_one_Click()
    move_one_Click source_lb:=no_print_lb, target_lb:=print_lb, moveall:=False
End Sub
'Basisfunktion zum Verschieben von Eintraegen zwischen zwei Listboxen
Private Sub move_one_Click(source_lb As MSForms.ListBox, target_lb As MSForms.ListBox, moveall As Boolean)
    Dim i%, j%
    i = source_lb.ListCount - 1
    Do While i >= 0
        'Eintrag ausgewaehlt => verschieben
        If source_lb.Selected(i) Or moveall Then
            'Suche den korrekten EInfuegepunkt
            j = 0
            Do While j < target_lb.ListCount
                If source_lb.List(i) < target_lb.List(j) Then
                    Exit Do
                End If
                j = j + 1
            Loop
            'Einfuegen
            target_lb.AddItem source_lb.List(i), j
            source_lb.RemoveItem i
        End If
        i = i - 1
    Loop
End Sub
Private Sub UserForm_Activate()
    Update_Form_Before_Showing
End Sub
Private Sub UserForm_Initialize()
    set_globals
    ok_pressed = False
    Update_Form_Before_Showing
End Sub
Sub Update_Form_Before_Showing()
    Dim i%
    'Listbox fuellen
    print_lb.Clear
    no_print_lb.Clear
    For i = 0 To UBound(KA_Id_liste)
        print_lb.AddItem KA_Id_liste(i)
    Next
End Sub


================================================================================
vbform: Auswahl_frm
================================================================================
Public ok_pressed As Boolean
Private Sub ESC_btn_Click()
        Me.Hide
        ok_pressed = False
End Sub
Private Sub OK_btn_Click()
        ok_pressed = True
        Me.Hide
End Sub
Private Sub UserForm_Activate()
    Update_Form_Before_Showing
End Sub
Private Sub UserForm_Initialize()
    set_globals
    ok_pressed = False
    Update_Form_Before_Showing
End Sub
Sub Update_Form_Before_Showing()
    'KA_Id_max = get_max_KA_Id
    KA_Id_min = get_min_KA_Id
    id_textbox.Value = KA_Id_min
End Sub


================================================================================
vbmodule: Const_Spalten_Namen
================================================================================
'Quellspalten in Sheet 'Input' (Hier wird der UNIPPS-Import zwischengespeichert)
'Die Konstanten werden verwendet um die Inhalte auf das Print-Sheet zu  uebertragen
Public Const col_ab_nr = 1
Public Const col_erstanlage = 2
Public Const col_status = 3
Public Const col_sprache = 4
Public Const col_pos_nr = 5
Public Const col_t_tg_nr = 6
Public Const col_werkstoff = 7
Public Const col_spezifikation = 8
Public Const col_typ = 9
Public Const col_k_ident = 10
Public Const col_menge = 11
Public Const col_k_Typ = 12
Public Const col_k_Zchn_Nr = 13
'Startspalte fuer Teil 2 des Datenimports aus "Teileinfo"
Public Const start_col_teileinfo = 14
Public Const col_teil_bezeich = 14


<EndofFile>