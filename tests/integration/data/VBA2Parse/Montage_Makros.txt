================================================================================
vbmodule: Globals
================================================================================
Option Explicit
'Konfiguration
Public Const stuecklisten_dir = "X:\KOM_ST"
'Public Const xls_auftragsbestand_dir = "V:\E-MAIL\Dr Etscheidt\Software_entwicklung\Montage"
Public Const xls_auftragsbestand_dir = "V:\Fertigung"
'Public Const xls_auftragsbestand_file = "Testkopie_Neupumpen_Montageverfolgung.xls"
Public Const xls_auftragsbestand_file = "Neupumpen_Montageverfolgung.xlsm"
Public Const xls_auftragsbestand_main_sheet = "Uebersicht"   'Ergebnissheet mit allen Daten
Public Const xls_auftragsbestand_erl_sheet = "erledigt"   'sheet fuer erledigte KA
Public Const xls_auftragsbestand_entf_sheet = "entfallen"   'sheet fuer entfallene KA
Public Const xls_auftragsbestand_KA_import_sheet = "KA_UNIPPS"   'sheet fuer UNIPPS Import Kundenauftraege
Public Const max_col_autofilled As Long = 13 'letzte Spalte die vom Programm gefüllt und benötigt wird
Public Const max_col_filled As Long = 20 'letzte Spalte die vom Programm benutzt wird (fuer Formatierung)
'Sonstige Globals
Public data_wb As Workbook  'Arbeitsmappe mit Daten
Public main_sheet As Worksheet 'Ergebnissheet mit allen Daten
Public main_sheet_bck As Worksheet 'Backup von Ergebnissheet
Public erl_sheet As Worksheet  'sheet fuer erledigte KA
Public entf_sheet As Worksheet  'sheet fuer entfallene KA
Public KA_imp_sheet As Worksheet  'sheet fuer UNIPPS Import Kundenauftraege
Public had_filter As Boolean ' Flag, ob auf Hauptsheet filter gesetzt ist
Public UNIPPS_dbr As DB_Reader


================================================================================
vbmodule: Auftragsbestand
================================================================================
Option Explicit
Public Sub men_move_Status5()
    Dim cur_row_main As Long, cur_row_erl As Long
    Dim max_row_main As Long, max_row_erl As Long
    On Error GoTo Fehler
    'Mappen laden und vorbereiten
    Application.StatusBar = "Verschiebe erledigte Auftraege " & Format(Now(), "HH:mm:ss")
    set_globals
    'Schutz aufheben
    data_wb.Unprotect
    main_sheet.Unprotect
    erl_sheet.Unprotect
    Application.ScreenUpdating = False
    'Action
    max_row_erl = hole_zeilen(erl_sheet.Range("A:A"))
    max_row_main = hole_zeilen(main_sheet.Range("A:A"))
    cur_row_erl = max_row_erl + 1
    For cur_row_main = 2 To max_row_main
        'KA ist Status 5
        If main_sheet.Cells(cur_row_main, 5) >= 5 Then
            'Kopieren und Kopie formatieren
            main_sheet.Rows(cur_row_main).Copy
            erl_sheet.Rows(cur_row_erl).PasteSpecial
            erl_sheet.Rows(cur_row_erl).Font.Color = 0
            erl_sheet.Rows(cur_row_erl).Interior.Pattern = xlNone
            'Datum aendern
            erl_sheet.Cells(cur_row_erl, 1).Value = Now()
            'Original loeschen nach nagelprobe
            If main_sheet.Cells(cur_row_main, 7) = erl_sheet.Cells(cur_row_erl, 7) Then
                main_sheet.Rows(cur_row_main).Delete
            End If
            'Zaehler updaten
            cur_row_erl = cur_row_erl + 1
            cur_row_main = cur_row_main - 1
        End If
    Next
Application.StatusBar = "Fertig " & Format(Now(), "HH:mm:ss")
Aufraeumen:
    On Error Resume Next
    data_wb.Protect , True, False 'Schutz wieder ein
    main_sheet.Protect
    erl_sheet.Protect
    Application.ScreenUpdating = True
    Exit Sub
Fehler:
    MsgBox "Abbruch wg Fehler: " & Err.Description
    Resume Aufraeumen
End Sub
Public Sub main_Update_Auftragsbestand()
On Error GoTo Fehler
'Mappen laden und vorbereiten
Application.StatusBar = "Starte Makro " & Format(Now(), "HH:mm:ss")
set_globals
prepare_workbook
'sortiere_fa
'Pumpen-Kundenaufträge seit 1000 Tagen in Excel KA_imp_sheet einlesen
Application.StatusBar = "UNIPPS wird gelesen " & Format(Now(), "HH:mm:ss")
'Hole_Pumpen_KA_aus_UNIPPS
open_ka_rs_from_unipps
'Verknüfe Haupt-Tabelle mit KA_UNIPPS und lege KA-Status und FA-Status in tmp-Tabelle ab
Application.StatusBar = "Datenbestand wird aktualisiert " & Format(Now(), "HH:mm:ss")
'status_update
aktualisiere_Datenbestand
'Neue FA anhaengen
Application.StatusBar = "Neue Datensätze werden angehängt " & Format(Now(), "HH:mm:ss")
'neue_KA_anhaengen
fuege_neue_FA_an
Application.StatusBar = "Suche Stücklisten zu den Datensätzen " & Format(Now(), "HH:mm:ss")
suche_stueckliste
markiere_fertige
'Alle Fa mit KA-Status 5 in Tabelle erledigt verschieben
 men_move_Status5
finish
Aufraeumen:
    On Error Resume Next
    Debug.Print data_wb.FullName & " auf Stand gebracht"
    Exit Sub
Fehler:
    MsgBox "Abbruch wg Fehler: " & Err.Description
    Resume Aufraeumen
End Sub
'Hole Kundeaufträge aus UNIPPS
'Legt globalen Reader an und lädt recordset in diesem
Private Sub open_ka_rs_from_unipps()
    Dim sql$
    Dim start_datum As Date
    Set UNIPPS_dbr = New_DB_Reader
    UNIPPS_dbr.Open_Informix_Connection
    start_datum = Now() - 1000
    'sql = sql_pumpen_FA(start_datum)
    sql = sql_pumpen_FA_Montageliste(start_datum)
    UNIPPS_dbr.open_rs (sql)
    If UNIPPS_dbr.Connection.Errors.Count <> 0 Then
        abbruchmeldung "UNIPPS-Daten konnten nicht gelesen werden."
    End If
    'Daten zur Kontrolle in sheet ablegen
    UNIPPS_dbr.recordset_2_sheet KA_imp_sheet.Range("A1"), Clear:=True, Header:=True
    get_KW KA_imp_sheet.Range("M1")
End Sub
'Filtere Import-Recordset nach Stati in Bearbeitung und suche diese in Haupttabelle
'Wenn noch nicht vorhanden, wird record angehängt und gelb hinterlegt
Private Sub fuege_neue_FA_an()
    Dim myrs As Recordset
    Dim rng_2search_in As Range, rng_result As Range
    Dim key$
    Dim record
    Set myrs = UNIPPS_dbr.rs
    Set rng_2search_in = main_sheet.Range("G:G")
    myrs.Filter = adFilterNone
    myrs.Filter = "fa_status<7 and ka_status<5"
    myrs.MoveFirst
    Do While Not myrs.EOF
        key = myrs.Fields("FA")
        Set rng_result = rng_2search_in.Find(What:=key)
        If rng_result Is Nothing Then
            record = myrs.GetRows(1)
            fuege_einen_neue_FA_an record
        Else
            myrs.MoveNext
        End If
    Loop
End Sub
'Suche alle FA der Haupttabelle im Import !!! Abbruch, wenn einer nicht auffindbar
'Vergleiche alle Felder. Geänderte Felder werden gelb hinterlegt und aktualisiert
Private Sub aktualisiere_Datenbestand()
    Dim myrs As Recordset
    Dim mycell As Range
    Dim row As Long, n_row As Long, max_row_entf As Long
    Dim record
    Set myrs = UNIPPS_dbr.rs
    'Wie viele Zeilen hat die Tabelle fuer entfallene KA
    max_row_entf = hole_zeilen(entf_sheet.Range("A:A")) + 1
    'Loop ueber alle Zeilen der Haupttabelle
    n_row = hole_zeilen(main_sheet.Range("A1"))
    myrs.Filter = adFilterNone
    myrs.MoveFirst
    For row = 2 To n_row
        Set mycell = main_sheet.Range("A1").Cells(row, 7)
        myrs.Find ("FA='" & mycell.Value & "'")
        If Not myrs.EOF Then
            record = myrs.GetRows(1)
            aktualisiere_einen_Datensatz row, record
        Else
            'Ka in Tabelle fuer entfallene KA verschieben
            MsgBox "FA <" & mycell & "> nicht mehr in Import-Daten gefunden. Entfallen ?"
            'Kopieren und Kopie formatieren
            main_sheet.Rows(row).Copy
            entf_sheet.Rows(max_row_entf).PasteSpecial
            entf_sheet.Rows(max_row_entf).Font.Color = 0
            entf_sheet.Rows(max_row_entf).Interior.Pattern = xlNone
            'Datum aendern
            entf_sheet.Cells(max_row_entf, 1).Value = Now()
            'Original loeschen nach nagelprobe
            If main_sheet.Cells(row, 7) = entf_sheet.Cells(max_row_entf, 7) Then
                main_sheet.Rows(row).Delete
            End If
            'Zaehler updaten
            max_row_entf = max_row_entf + 1
            row = row - 1
            n_row = n_row - 1
        End If
        'Debug.Print row
        myrs.Filter = adFilterNone
        If row = n_row Then
            Exit For
        End If
    Next
End Sub
Private Sub suche_stueckliste()
    'Suche Stücklisten zu den Kommissionen anhand der Strichnummer
    'Es wird darauf vertraut, das im TB die Pumpen am Anfang des Kundenauftrages mit fortlaufenden Pos.-Nr. ab 1 stehen
    'Die Strichnummer fuer die n-te Position ergibt sich dann aus der Strichnummer fuer die n-1-te Position (Vorgängerpos)
    ' erhöht um die Stückzahl der Vorgängerposition
    'Das Verfahren ordnet keine Stückliste zu, wenn die obigen Vorraussetzungen (Pumpen fortlaufend, ohne Lücken ab Pos 1 im KA)
    ' nicht erfuellt sind
    'Tabelle wird dazu nach Komm-Nr. und Pos.-Nr sortiert
    Dim jahr$, komnr$, komnr_lfn$, prev_komnr$, stu_nr$, pdf$
    Dim pos_nr%, pos_nr_soll%, stueck%, strich_nr%
    Dim row As Long, n_row As Long
    Dim mycell As Range
    Dim first_pos As Boolean
    Dim typ$
    sort_sheet "komm_nr"
    'Loop ueber alle Zeilen der Haupttabelle
    n_row = hole_zeilen(main_sheet.Range("A1"))
    first_pos = True 'Merker fuer erste Pos der Kommission (muss erster Eintrag sein)
    For row = 2 To n_row
        Set mycell = main_sheet.Range("A1").Cells(row, 2)
        'Dir stuecklisten_dir
        komnr = mycell.Value
        pos_nr = mycell.Offset(0, 4).Value
        stueck = mycell.Offset(0, 9).Value
        typ = mycell.Offset(0, 8).Value
        If row = 2 Then
            pos_nr_soll = 1
            'first_pos = False
            prev_komnr = komnr 'komnr merken
            strich_nr = stueck
        Else
            'Komm fertig
            If komnr <> prev_komnr Then
                pos_nr_soll = 1
                prev_komnr = komnr 'komnr merken
                strich_nr = stueck
            Else
                If Left(typ, 11) <> "NE_Lagerung" Then
                    pos_nr_soll = pos_nr_soll + 1
                    strich_nr = strich_nr + stueck
                End If
            End If
        End If
        If pos_nr <> pos_nr_soll Then
            If Left(typ, 11) = "NE_Lagerung" Then
                pos_nr = pos_nr_soll
            Else
                'MsgBox "Datenfehler in Zeile: " & row & " Posnr muesste " & pos_nr_soll & "sein."
            End If
        ElseIf Left(typ, 11) <> "NE_Lagerung" Then
            'Alles ok : Suche STU
            jahr = Left(komnr, 2)
            komnr_lfn = Mid(komnr, 4, 4)
            stu_nr = stuecklisten_dir & "\" & jahr & "\" & jahr & komnr_lfn & Format(strich_nr, "00") & "*"
            main_sheet.Unprotect
            mycell.Hyperlinks.Delete
            pdf = Dir(stu_nr)
            Do While pdf <> ""
                'Debug.Print komnr_lfn, jahr, stu_nr, pdf
 mycell.Hyperlinks.Add anchor:=mycell,                     Address:=stuecklisten_dir & "\" & jahr & "\" & pdf 'TextToDisplay:=xml_file_name
                pdf = Dir()
            Loop
            main_sheet.Protect
        End If
    Next row
End Sub
'Vergleiche alle Felder einer Zeile aus der Haupttabelle mit zugehörigem Importrecord.
'Geänderte Felder werden gelb hinterlegt und aktualisiert
Private Sub aktualisiere_einen_Datensatz(row As Long, record)
    Dim col%
    Dim liefer_tag As Date
    'Spalte 13 ist Liefertermin als KW
    liefer_tag = DateValue(record(11, 0))
    record(12, 0) = kwstr(liefer_tag)
    With main_sheet.Range("A1")
        For col = 2 To 13
            If record(col - 1, 0) <> .Cells(row, col).Value Then
                'Debug.Print row, record(col - 1, 0), .Cells(row, col).Value
                .Cells(row, col).Value = record(col - 1, 0)
                .Cells(row, col).Interior.Pattern = xlSolid
                .Cells(row, col).Interior.Color = 65535
            End If
        Next
    End With
End Sub
'Überträgt neuen Datensatz in Haupttabelle und hinterlget gelb
Private Sub fuege_einen_neue_FA_an(record)
    Dim col%, last_row As Long
    Dim liefer_tag As Date
    'Spalte 13 ist Liefertermin als KW
    liefer_tag = DateValue(record(11, 0))
    record(12, 0) = kwstr(liefer_tag)
    last_row = hole_zeilen(main_sheet.Range("A1")) + 1
    With main_sheet.Range("A1")
        For col = 1 To 13
            .Cells(last_row, col).Value = record(col - 1, 0)
            .Cells(last_row, col).Interior.Pattern = xlSolid
            .Cells(last_row, col).Interior.Color = 65535
        Next
    End With
End Sub
'Tabelle in Originalzustand zurück, nach Ende einer Operation
Private Sub finish()
    'Mappe nachbereiten: Filter aus, Farbmnarkierungen aus,...
    If had_filter Then
        'main_sheet.Rows().AutoFilter
        main_sheet.Unprotect
        Filter_Restore
    End If
    'sortiere_liefertermin
    Application.ScreenUpdating = True
    data_wb.Activate
    main_sheet.Activate
    main_sheet.Range("a2").Activate
    main_sheet.Range("a2").Select
 main_sheet.Protect DrawingObjects:=False, Contents:=True, Scenarios:= False, AllowFormattingCells:=True, AllowFormattingColumns:=True,        AllowFormattingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True, AllowSorting:=False
    'Application.StatusBar = "Schutz ein"
    Application.StatusBar = "fertig"
End Sub
Sub xx()
    set_globals
 main_sheet.Protect DrawingObjects:=False, Contents:=True, Scenarios:= False, AllowFormattingCells:=True, AllowFormattingColumns:=True,        AllowFormattingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True, AllowSorting:=False
End Sub
'Mappe laden
Public Sub set_globals()
    'Excel laden, falls nicht schon offen
    'Set data_wb = Oeffne_Excel(xls_auftragsbestand_file, xls_auftragsbestand_dir)
    Set data_wb = Workbooks(xls_auftragsbestand_file)
    Set main_sheet = data_wb.Worksheets(xls_auftragsbestand_main_sheet)
    Set main_sheet_bck = data_wb.Worksheets(xls_auftragsbestand_main_sheet & "_alt")
    Set erl_sheet = data_wb.Worksheets(xls_auftragsbestand_erl_sheet)
    Set entf_sheet = data_wb.Worksheets(xls_auftragsbestand_entf_sheet)
    Set KA_imp_sheet = data_wb.Worksheets(xls_auftragsbestand_KA_import_sheet)
    'Tests ob WB-Struktur wie erwartet
    check_workbook
End Sub
'Tests ob WB-Struktur wie erwartet
Private Sub check_workbook()
    Dim col As Long
    For col = 1 To max_col_autofilled
        If main_sheet.Cells(1, col) <> main_sheet_bck.Cells(1, col) Then
            abbruchmeldung "Falsche Spalte <" & main_sheet.Cells(1, col) & "> in Tabelle " & main_sheet.Name
        End If
    Next
End Sub
'Mappe vorbereiten
Private Sub prepare_workbook()
    Application.ScreenUpdating = False
    'Test ob Mappe freigegeben wurde
    'Debug.Print data_wb.FullName
    If data_wb.MultiUserEditing Then
        abbruchmeldung "Die Excel-Mappe wurde freigegeben. Bitte zuerst Freigabe entfernen, Mappe speichern und neu laden."
    End If
    'Sicherheitskopie des alten Standes erzeugen
    '--------------------------------------------------
    data_wb.Unprotect  'Schutz aus
    'Lösche alte SIKO ohne Rückfrage und ohne Fehler, wenn nicht vorhanden
    On Error Resume Next: Application.DisplayAlerts = False
    main_sheet_bck.Delete
    On Error GoTo 0:   Application.DisplayAlerts = True
    'Kopie erzeugen, global merken und Umbenennen
    main_sheet.Copy After:=main_sheet 'neue Kopie
    Set main_sheet_bck = ActiveSheet
    main_sheet_bck.Unprotect
    main_sheet_bck.Name = "Uebersicht_alt"
    main_sheet_bck.Cells.Font.Strikethrough = True
    data_wb.Protect , True, False 'Schutz wieder ein
    main_sheet_bck.Protect
    'main_sheet Aktivieren
    main_sheet.Activate
    'Blattschutz aus
    main_sheet.Unprotect
    'Mappe vorbereiten: Filter aus, Farbmnarkierungen aus,...
    If main_sheet.AutoFilterMode Then
        MerkeFilter
        main_sheet.AutoFilterMode = False
        had_filter = True
    Else
        had_filter = False
    End If
    'Hinterlegungen aus
    main_sheet.Range(main_sheet.Cells(2, 1), main_sheet.Cells(20000, max_col_autofilled)).Interior.Pattern = xlNone
    main_sheet.Cells.Font.Color = 0
End Sub


================================================================================
vbmodule: Sort_u_Format
================================================================================
Dim filterArray()
Dim currentFiltRange As String
Sub MerkeFilter()
    With main_sheet.AutoFilter
         currentFiltRange = .Range.Address
         With .Filters
            ReDim filterArray(1 To .Count, 1 To 3)
            For f = 1 To .Count
                With .Item(f)
                    If .On Then
                        filterArray(f, 1) = .Criteria1
                        If .Operator Then
                            filterArray(f, 2) = .Operator
                            'If Not .Criteria2 Is Nothing Then
                            If .Operator <> xlFilterValues Then 'Filtertyp 7 hat kein Criteria2
                                filterArray(f, 3) = .Criteria2
                            End If
                        End If
                     End If
                End With
            Next
        End With
    End With
End Sub
Sub Filter_Restore()
    main_sheet.AutoFilterMode = False
    For col = 1 To UBound(filterArray(), 1)
        If Not IsEmpty(filterArray(col, 1)) Then
            If filterArray(col, 2) Then
 main_sheet.Range(currentFiltRange).AutoFilter Field:=col, Criteria1:=filterArray(col, 1), Operator:=filterArray(col, 2),                Criteria2:=filterArray(col, 3)
            Else
 main_sheet.Range(currentFiltRange).AutoFilter Field:=col,                Criteria1:=filterArray(col, 1)
            End If
        End If
    Next
End Sub
Sub add_filter(sort_type$)
    With ActiveSheet.Sort.SortFields
        Select Case sort_type
            Case "FA"
                'Spalte G d.h FA
                .Add key:=Range("G:G"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            Case "komm_nr"
                'Spalte B,F d.h Komm,Pos
                .Add key:=Range("B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
                .Add key:=Range("F:F"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            Case "eingelesen"
                .Add key:=Range("A:A"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortTextAsNumbers
                .Add key:=Range("B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
                .Add key:=Range("F:F"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            Case "Lieferwoche"
                'Spalte L,B,F d.h KW,Komm,Pos
                .Add key:=Range("L:L"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
                .Add key:=Range("B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
                .Add key:=Range("F:F"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            Case "erstanlage"
                'Spalte i,B,F d.h eingelesen,Komm,Pos
                .Add key:=Range("I:I"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortTextAsNumbers
                .Add key:=Range("B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
                .Add key:=Range("F:F"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        End Select
    End With
End Sub
Sub sort_sheet(sort_type$)
    ActiveSheet.Unprotect
    With ActiveSheet.Sort
        .SortFields.Clear
        Select Case sort_type
            Case "FA"
                'Spalte G d.h FA
                add_filter "FA"
                Application.StatusBar = "Sortiert nach FA"
            Case "komm_nr"
                'Spalte B,F d.h Komm,Pos
                add_filter "komm_nr"
                Application.StatusBar = "Sortiert nach komm_nr"
            Case "Lieferwoche"
                'Spalte L,B,F d.h KW,Komm,Pos
                add_filter "Lieferwoche"
                Application.StatusBar = "Sortiert nach Liefertermin"
            Case "eingelesen"
                'Spalte A,B,F d.h eingelesen,Komm,Pos
                add_filter "eingelesen"
                Application.StatusBar = "Sortiert nach Einlesedatum"
            Case "erstanlage"
                'Spalte i,B,F d.h eingelesen,Komm,Pos
                add_filter "erstanlage"
                Application.StatusBar = "Sortiert nach erstanlage UNIPPS"
        End Select
        .SetRange Range("A:AA")
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    ActiveSheet.Range("a2").Activate
    'Sub Protect([Password], [DrawingObjects], [Contents], [Scenarios], [UserInterfaceOnly], [AllowFormattingCells], [AllowFormattingColumns], [AllowFormattingRows], [AllowInsertingColumns], [AllowInsertingRows], [AllowInsertingHyperlinks], [AllowDeletingColumns], [AllowDeletingRows], [AllowSorting], [AllowFiltering], [AllowUsingPivotTables])
 ActiveSheet.Protect DrawingObjects:=False, Contents:=True, Scenarios:=False, AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True, AllowSorting:=False
End Sub
Sub xx_sort_sheet(sort_type$)
    ActiveSheet.Unprotect
    With ActiveSheet.Range("A:AA")
        Select Case sort_type
            Case "FA"
                'Spalte G d.h FA
 .Sort Key1:=Range("G:G"), Order1:=xlAscending, Header:=xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom,                      DataOption1:=xlSortNormal
                Application.StatusBar = "Sortiert nach FA"
            Case "komm_nr"
                'Spalte B,F d.h Komm,Pos
 .Sort Key1:=Range("B:B"), Order1:=xlAscending, Key2:=Range("F:F"), Order2:=xlAscending, Header:=xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom,                      DataOption1:=xlSortTextAsNumbers, DataOption2:=xlSortNormal
                Application.StatusBar = "Sortiert nach komm_nr"
            Case "Lieferwoche"
                'Spalte L,B,F d.h KW,Komm,Pos
 .Sort Key1:=Range("L:L"), Order1:=xlAscending, Key2:=Range("B:B"), Order2:=xlAscending, Key3:=Range("F:F"), Order3:=xlAscending, Header:=xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom,                      DataOption1:=xlSortTextAsNumbers, DataOption2:=xlSortTextAsNumbers, DataOption3:=xlSortNormal
                Application.StatusBar = "Sortiert nach Liefertermin"
            Case "eingelesen"
                'Spalte A,B,F d.h eingelesen,Komm,Pos
 .Sort Key1:=Range("A:A"), Order1:=xlDescending, Key2:=Range("B:B"), Order2:=xlAscending, Key3:=Range("F:F"), Order3:=xlAscending, Header:=xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom,                      DataOption1:=xlSortTextAsNumbers, DataOption2:=xlSortTextAsNumbers, DataOption3:=xlSortNormal
                Application.StatusBar = "Sortiert nach Einlesedatum"
            Case "erstanlage"
                'Spalte i,B,F d.h eingelesen,Komm,Pos
 .Sort Key1:=Range("I:I"), Order1:=xlDescending, Key2:=Range("B:B"), Order2:=xlAscending, Key3:=Range("F:F"), Order3:=xlAscending, Header:=xlYes, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom,                      DataOption1:=xlSortTextAsNumbers, DataOption2:=xlSortTextAsNumbers, DataOption3:=xlSortNormal
                Application.StatusBar = "Sortiert nach erstanlage UNIPPS"
        End Select
    End With
    ActiveSheet.Range("a2").Activate
    'Sub Protect([Password], [DrawingObjects], [Contents], [Scenarios], [UserInterfaceOnly], [AllowFormattingCells], [AllowFormattingColumns], [AllowFormattingRows], [AllowInsertingColumns], [AllowInsertingRows], [AllowInsertingHyperlinks], [AllowDeletingColumns], [AllowDeletingRows], [AllowSorting], [AllowFiltering], [AllowUsingPivotTables])
 ActiveSheet.Protect DrawingObjects:=False, Contents:=True, Scenarios:=False, AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowDeletingRows:=True, AllowFiltering:=True, AllowSorting:=False
End Sub
Sub markiere_fertige()
    Dim row As Range
    Set data_wb = Workbooks(xls_auftragsbestand_file)
    Set main_sheet = data_wb.Worksheets(xls_auftragsbestand_main_sheet)
    For Each row In main_sheet.Rows
        'Ab Zeile 2
        If row.row > 1 Then
            If row.Cells(1, 8) > 6 Or row.Cells(1, 5) > 4 Then 'Status FA,KA prüfen
                main_sheet.Unprotect
                Range(row.Cells(1, 1), row.Cells(1, max_col_filled)).Cells.Font.Color = 5296274
                main_sheet.Protect
            End If
        End If
    Next
End Sub


================================================================================
vbmodule: Menues
================================================================================
'alle Aktionen, die beim Oeffnen der Mappe erfolgen sollen
Public Sub Workbook_Open_handler()
    Dim erg%
    Dim myctrl As CommandBarPopup
    Dim myctrl_btn As CommandBarButton
    Application.StatusBar = "Hallo " & Application.UserName
    'Update nur fuer gewisse USER
    If InStr(Application.UserName, "Etscheidt") > 0 Then
        user_ok = True
    End If
    If InStr(Application.UserName, "Maaß") > 0 Then
        user_ok = True
    End If
    If InStr(Application.UserName, "Hannemann") > 0 Then
        user_ok = True
    End If
    If Not user_ok Then
        Exit Sub
    End If
    'define_menues
    'Abfrage ob Update aus UNIPPS
    erg = MsgBox("Sollen Daten aus UNIPPS aktualisiert werden ?", vbYesNo)
    If erg = vbYes Then
        'Neue FA lesen, vorhandene aktualisieren
        'Alle Fa mit KA-Status 5 in Tabelle erledigt verschieben
        main_Update_Auftragsbestand
    End If
End Sub
'Bei Wunsch ueber Workbook_Open_handler einbinden
Private Sub define_menues()
    With Application.CommandBars.ActiveMenuBar
        .Reset
        'Neues Hauptmenu in Office 2007 nicht direkt sichtbar, sondern unter Add-Ins
        Set myctrl = .Controls.Add(Type:=msoControlPopup, Before:=.Controls("?").Index, temporary:=True)
        myctrl.Caption = "&UNIPPS"
        'Neuen Befehl
        Set myctrl_btn = myctrl.Controls.Add(Type:=msoControlButton, temporary:=True)
        myctrl_btn.Caption = "&Pumpen-Import"
        myctrl_btn.Visible = True
        myctrl_btn.OnAction = "main_Update_Auftragsbestand"
        Set myctrl_btn = myctrl.Controls.Add(Type:=msoControlButton, temporary:=True)
        myctrl_btn.Caption = "&reload"
        myctrl_btn.Visible = True
        myctrl_btn.OnAction = "men_reload"
    End With
End Sub
Public Sub Double_click_handler(ByVal Target As Range)
    Select Case Target.Address
        Case "$B$1"
            sort_sheet "komm_nr"
        Case "$G$1"
            sort_sheet "FA"
        Case "$L$1", "$M$1"
            sort_sheet "Lieferwoche"
        Case "$A$1"
            sort_sheet "eingelesen"
        Case "$I$1"
            sort_sheet "erstanlage"
    End Select
End Sub
Sub men_reload()
    On Error Resume Next
    Set data_wb = Workbooks(xls_auftragsbestand_file)
    data_wb.Close False
    load_workbook
End Sub


================================================================================
vbmodule: Spielwiese
================================================================================
Private Sub import2()
    Dim zelle As Range
    On Error GoTo Fehler
    'Mappen laden und vorbereiten
    Application.StatusBar = "Starte Makro " & Format(Now(), "HH:mm:ss")
    load_workbook
    'prepare_workbook
    'sortiere_fa
    'Pumpen-Kundenaufträge seit 1000 Tagen in Excel KA_imp_sheet einlesen
    Application.StatusBar = "UNIPPS wird gelesen " & Format(Now(), "HH:mm:ss")
    'Set data_wb = Workbooks(xls_auftragsbestand_file)
    'Set main_sheet = data_wb.Worksheets(xls_auftragsbestand_main_sheet)
    For Each zelle In main_sheet.Range("B2").CurrentRegion.Rows
        'Ab Zeile 2
        Debug.Print zelle.Cells(1, 2)
    Next
Aufraeumen:
    On Error Resume Next
    Exit Sub
Fehler:
    MsgBox "Abbruch wg Fehler: " & Err.Description
    Resume Aufraeumen
End Sub


<EndofFile>